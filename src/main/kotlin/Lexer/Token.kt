package me.user.Lexer

import java.math.BigInteger

enum class TokenType {
    NONSENSE,
    INTEGER, // integer 123456
    STRING, // "aaa"
    COLON,
    DOT,
    LBRACKET,
    RBRACKET,
    LBRACE,
    RBRACE,
    PLUS,
    MINUS,
    ASTERISK,
    SLASH,
    ASSIGN,
    EQ,
    NOT_EQ,
    DIM,
    BANG,
    BOOL_NOT,
    LT,
    GT,
    SEMICOLON,
    EOL,
    IDENT,
    ILLEGAL,
    BOOL_TRUE,
    BOOL_FALSE,
    RETURN,
    LPAREN,
    RPAREN,
    IF,
    BOOL_AND,
    BOOL_OR,
    THEN,
    ELSEIF,
    ELSE,
    FUNC,
    COMMA,
    CLASS,
    PUBLIC,
    PRIVATE,
    READONLY,
    FOR,
    IN,
    NEXT,
    WHILE,
    NEW,
    INCLUDE,
    IMPORT,
    FROM,
    AS,
    LET,
    THROW,
    TRY,
    CATCH,
    FINALLY,
    END,
    DECLARE,
    LIB,
    ALIAS,
    EOF
}

data class Token(
    var tokenType: TokenType,
    var value: String,
    var line: BigInteger
)

val TokenTypeMap = mapOf(
    ":" to TokenType.COLON,
    "." to TokenType.DOT,
    "[" to TokenType.LBRACKET,
    "]" to TokenType.RBRACKET,
    "{" to TokenType.LBRACE,
    "}" to TokenType.RBRACE,
    "+" to TokenType.PLUS,
    "-" to TokenType.MINUS,
    "*" to TokenType.ASTERISK,
    "/" to TokenType.SLASH,
    "=" to TokenType.ASSIGN,
    "==" to TokenType.EQ,
    "!=" to TokenType.NOT_EQ,
    "<>" to TokenType.NOT_EQ,
    "DIM" to TokenType.DIM,
    "!" to TokenType.BANG,
    "NOT" to TokenType.BOOL_NOT,
    "<" to TokenType.LT,
    ">" to TokenType.GT,
    ";" to TokenType.SEMICOLON,
    "\r\n" to TokenType.EOL,
    "TRUE" to TokenType.BOOL_TRUE,
    "FALSE" to TokenType.BOOL_FALSE,
    "RETURN" to TokenType.RETURN,
    "(" to TokenType.LPAREN,
    ")" to TokenType.RPAREN,
    "IF" to TokenType.IF,
    "AND" to TokenType.BOOL_AND,
    "OR" to TokenType.BOOL_OR,
    "THEN" to TokenType.THEN,
    "ELSEIF" to TokenType.ELSEIF,
    "ELSE" to TokenType.ELSE,
    "END" to TokenType.END,
    "FUNC" to TokenType.FUNC,
    "," to TokenType.COMMA,
    "CLASS" to TokenType.CLASS,
    "PUBLIC" to TokenType.PUBLIC,
    "PRIVATE" to TokenType.PRIVATE,
    "READONLY" to TokenType.READONLY,
    "FOR" to TokenType.FOR,
    "IN" to TokenType.IN,
    "NEXT" to TokenType.NEXT,
    "WHILE" to TokenType.WHILE,
    "NEW" to TokenType.NEW,
    "INCLUDE" to TokenType.INCLUDE,
    "IMPORT" to TokenType.IMPORT,
    "FROM" to TokenType.FROM,
    "AS" to TokenType.AS,
    "LET" to TokenType.LET,
    "THROW" to TokenType.THROW,
    "TRY" to TokenType.TRY,
    "CATCH" to TokenType.CATCH,
    "FINALLY" to TokenType.FINALLY,
    "DECLARE" to TokenType.DECLARE,
    "LIB" to TokenType.LIB,
    "ALIAS" to TokenType.ALIAS,
    "\u0000" to TokenType.EOF
)

val StringMap = mapOf(
    TokenType.COLON to ":",
    TokenType.DOT to ".",
    TokenType.LBRACKET to "[",
    TokenType.RBRACKET to "]",
    TokenType.LBRACE to "{",
    TokenType.RBRACE to "}",
    TokenType.PLUS to "+",
    TokenType.MINUS to "-",
    TokenType.ASTERISK to "*",
    TokenType.SLASH to "/",
    TokenType.ASSIGN to "=",
    TokenType.EQ to "==",
    TokenType.NOT_EQ to "!=",
    TokenType.DIM to "Dim",
    TokenType.BANG to "!",
    TokenType.BOOL_NOT to "Not",
    TokenType.LT to "<",
    TokenType.GT to ">",
    TokenType.SEMICOLON to ";",
    TokenType.EOL to "换行符",
    TokenType.IDENT to "标识符",
    TokenType.BOOL_TRUE to "True",
    TokenType.BOOL_FALSE to "False",
    TokenType.RETURN to "Return",
    TokenType.LPAREN to "(",
    TokenType.RPAREN to ")",
    TokenType.IF to "If",
    TokenType.BOOL_AND to "And",
    TokenType.BOOL_OR to "Or",
    TokenType.THEN to "Then",
    TokenType.ELSEIF to "Elseif",
    TokenType.ELSE to "Else",
    TokenType.FUNC to "Func",
    TokenType.COMMA to ",",
    TokenType.CLASS to "Class",
    TokenType.PUBLIC to "PUBLIC",
    TokenType.PRIVATE to "PRIVATE",
    TokenType.READONLY to "READONLY",
    TokenType.FOR to "For",
    TokenType.IN to "In",
    TokenType.NEXT to "Next",
    TokenType.WHILE to "While",
    TokenType.NEW to "New",
    TokenType.INCLUDE to "Include",
    TokenType.IMPORT to "Import",
    TokenType.FROM to "From",
    TokenType.AS to "As",
    TokenType.LET to "Let",
    TokenType.THROW to "Throw",
    TokenType.TRY to "Try",
    TokenType.CATCH to "Catch",
    TokenType.END to "End",
    TokenType.FINALLY to "Finally",
    TokenType.DECLARE to "Declare",
    TokenType.LIB to "Lib",
    TokenType.ALIAS to "Alias",
    TokenType.EOF to "文件结束"
)
